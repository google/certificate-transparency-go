// Code generated by protoc-gen-go. DO NOT EDIT.
// source: multilog_cfg.proto

/*
Package client is a generated protocol buffer package.

It is generated from these files:
	multilog_cfg.proto

It has these top-level messages:
	TemporalLogConfig
	LogShardConfig
*/
package client

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import keyspb "github.com/google/trillian/crypto/keyspb"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// TemporalLogConfig is a set of LogShardConfig messages, whose
// time limits should be contiguous.
type TemporalLogConfig struct {
	Shard []*LogShardConfig `protobuf:"bytes,1,rep,name=shard" json:"shard,omitempty"`
}

func (m *TemporalLogConfig) Reset()                    { *m = TemporalLogConfig{} }
func (m *TemporalLogConfig) String() string            { return proto.CompactTextString(m) }
func (*TemporalLogConfig) ProtoMessage()               {}
func (*TemporalLogConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TemporalLogConfig) GetShard() []*LogShardConfig {
	if m != nil {
		return m.Shard
	}
	return nil
}

// LogShardConfig describes the acceptable date range for a single shard of a temporal
// log.
type LogShardConfig struct {
	Uri       string            `protobuf:"bytes,1,opt,name=uri" json:"uri,omitempty"`
	PublicKey *keyspb.PublicKey `protobuf:"bytes,2,opt,name=public_key,json=publicKey" json:"public_key,omitempty"`
	// not_after_start defines the start of the range of acceptable NotAfter
	// values, inclusive.
	// Leaving this unset implies no lower bound to the range.
	NotAfterStart *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=not_after_start,json=notAfterStart" json:"not_after_start,omitempty"`
	// not_after_limit defines the end of the range of acceptable NotAfter values,
	// exclusive.
	// Leaving this unset implies no upper bound to the range.
	NotAfterLimit *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=not_after_limit,json=notAfterLimit" json:"not_after_limit,omitempty"`
}

func (m *LogShardConfig) Reset()                    { *m = LogShardConfig{} }
func (m *LogShardConfig) String() string            { return proto.CompactTextString(m) }
func (*LogShardConfig) ProtoMessage()               {}
func (*LogShardConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LogShardConfig) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *LogShardConfig) GetPublicKey() *keyspb.PublicKey {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *LogShardConfig) GetNotAfterStart() *google_protobuf.Timestamp {
	if m != nil {
		return m.NotAfterStart
	}
	return nil
}

func (m *LogShardConfig) GetNotAfterLimit() *google_protobuf.Timestamp {
	if m != nil {
		return m.NotAfterLimit
	}
	return nil
}

func init() {
	proto.RegisterType((*TemporalLogConfig)(nil), "client.TemporalLogConfig")
	proto.RegisterType((*LogShardConfig)(nil), "client.LogShardConfig")
}

func init() { proto.RegisterFile("multilog_cfg.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x8f, 0x3f, 0x6f, 0xb3, 0x30,
	0x10, 0x87, 0xc5, 0xcb, 0xdb, 0x48, 0x71, 0xd4, 0x3f, 0xf1, 0x50, 0x21, 0x96, 0xa2, 0x4c, 0x0c,
	0x95, 0xa9, 0x52, 0xf5, 0x03, 0xa4, 0x1d, 0xcb, 0x50, 0x91, 0xec, 0xc8, 0x50, 0xe3, 0x58, 0xb1,
	0x39, 0xcb, 0x1c, 0x03, 0xdf, 0xb5, 0x1f, 0xa6, 0x02, 0xc3, 0x90, 0xad, 0x93, 0xcf, 0x77, 0xcf,
	0x73, 0xba, 0x1f, 0xa1, 0xa6, 0xd7, 0xa8, 0x34, 0xc8, 0xb2, 0x6e, 0x24, 0xb3, 0x0e, 0x10, 0xe8,
	0xaa, 0xd6, 0x4a, 0xb4, 0x18, 0xbf, 0x49, 0x85, 0xe7, 0xbe, 0x62, 0x35, 0x98, 0x4c, 0x02, 0x48,
	0x2d, 0x32, 0x74, 0x4a, 0x6b, 0xc5, 0xdb, 0xac, 0x76, 0x83, 0x45, 0xc8, 0x2e, 0x62, 0xe8, 0x6c,
	0x35, 0x3f, 0x5e, 0x8f, 0x9f, 0x66, 0x76, 0xfa, 0x55, 0x7d, 0x93, 0xa1, 0x32, 0xa2, 0x43, 0x6e,
	0xac, 0x07, 0x76, 0x07, 0xb2, 0x3d, 0x09, 0x63, 0xc1, 0x71, 0x9d, 0x83, 0xfc, 0x80, 0xb6, 0x51,
	0x92, 0x3e, 0x93, 0x9b, 0xee, 0xcc, 0xdd, 0x77, 0x14, 0x24, 0x61, 0xba, 0xd9, 0x3f, 0x32, 0x7f,
	0x04, 0xcb, 0x41, 0x1e, 0xc7, 0xbe, 0xc7, 0x0a, 0x0f, 0xed, 0x7e, 0x02, 0x72, 0x77, 0x3d, 0xa1,
	0x0f, 0x24, 0xec, 0x9d, 0x8a, 0x82, 0x24, 0x48, 0xd7, 0xc5, 0x58, 0xd2, 0x17, 0x42, 0x6c, 0x5f,
	0x69, 0x55, 0x97, 0x17, 0x31, 0x44, 0xff, 0x92, 0x20, 0xdd, 0xec, 0xb7, 0x6c, 0xbe, 0xf5, 0x6b,
	0x9a, 0x7c, 0x8a, 0xa1, 0x58, 0xdb, 0xa5, 0xa4, 0xef, 0xe4, 0xbe, 0x05, 0x2c, 0x79, 0x83, 0xc2,
	0x95, 0x1d, 0x72, 0x87, 0x51, 0x38, 0x69, 0x31, 0xf3, 0xa1, 0xd8, 0x12, 0x8a, 0x9d, 0x96, 0x50,
	0xc5, 0x6d, 0x0b, 0x78, 0x18, 0x8d, 0xe3, 0x28, 0x5c, 0xef, 0xd0, 0xca, 0x28, 0x8c, 0xfe, 0xff,
	0x7d, 0x47, 0x3e, 0x0a, 0xd5, 0x6a, 0x42, 0x5e, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xa7, 0xe2,
	0x1a, 0xde, 0x9e, 0x01, 0x00, 0x00,
}
